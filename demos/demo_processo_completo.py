"""
DEMONSTRA√á√ÉO COMPLETA: CODIFICA√á√ÉO E DECODIFICA√á√ÉO
===================================================

Este script demonstra todo o processo de:
1. Codificar uma mensagem em n√∫meros
2. Como algu√©m decodificaria essa mensagem
"""

def criar_alfabeto_deslocado(deslocamento):
    alfabeto = 'abcdefghijklmnopqrstuvwxyz'
    return alfabeto[deslocamento:] + alfabeto[:deslocamento]

def criar_mapeamento_letra_numero(alfabeto_deslocado):
    return {letra: posicao for posicao, letra in enumerate(alfabeto_deslocado, start=1)}

def criar_mapeamento_numero_letra(alfabeto_deslocado):
    return {posicao: letra for posicao, letra in enumerate(alfabeto_deslocado, start=1)}

def codificar(mensagem, mapeamento):
    mensagem = mensagem.lower()
    return [mapeamento[letra] for letra in mensagem if letra in mapeamento]

def decodificar(numeros, mapeamento):
    return "".join([mapeamento[num] for num in numeros])

# ===================================================================
# PARTE 1: VOC√ä ENVIANDO UMA MENSAGEM SECRETA
# ===================================================================

print("=" * 70)
print("   DEMONSTRA√á√ÉO: PROCESSO COMPLETO DE CRIPTOGRAFIA")
print("=" * 70)
print()
print("üì§ PARTE 1: VOC√ä ENVIA UMA MENSAGEM SECRETA")
print("=" * 70)
print()

# Suas informa√ß√µes secretas
mensagem_original = "ataque"
chave_secreta = 5

print(f"üîê Sua mensagem secreta: '{mensagem_original.upper()}'")
print(f"üîë Sua chave secreta: {chave_secreta}")
print()

# Processo de codifica√ß√£o
alfabeto_deslocado = criar_alfabeto_deslocado(chave_secreta)
mapeamento_codificar = criar_mapeamento_letra_numero(alfabeto_deslocado)
mensagem_cifrada = codificar(mensagem_original, mapeamento_codificar)

print("üîÑ PROCESSO DE CODIFICA√á√ÉO:")
print("-" * 70)
print(f"   Alfabeto original:     abcdefghijklmnopqrstuvwxyz")
print(f"   Alfabeto deslocado:    {alfabeto_deslocado}")
print()
print("   Convertendo letra por letra:")
for i, letra in enumerate(mensagem_original):
    numero = mapeamento_codificar[letra]
    print(f"      '{letra}' ‚Üí {numero}")
print()
print(f"‚úÖ Mensagem codificada: {mensagem_cifrada}")
print()
print("üì® Voc√™ transmite apenas os n√∫meros: " + ", ".join(map(str, mensagem_cifrada)))
print("üîë E compartilha a chave separadamente (de forma segura): {chave_secreta}")
print()

# ===================================================================
# PARTE 2: SEU AMIGO RECEBENDO E DECIFRANDO
# ===================================================================

print()
print("=" * 70)
print("üì• PARTE 2: SEU AMIGO RECEBE E DECIFRA A MENSAGEM")
print("=" * 70)
print()

# O que seu amigo recebeu
numeros_recebidos = mensagem_cifrada
chave_recebida = chave_secreta

print(f"üì¨ Mensagem recebida (n√∫meros): {numeros_recebidos}")
print(f"üîë Chave recebida (separadamente): {chave_recebida}")
print()

# Processo de decodifica√ß√£o
print("üîì PROCESSO DE DECODIFICA√á√ÉO:")
print("-" * 70)

# Reconstr√≥i o mesmo alfabeto
alfabeto_deslocado_decodificar = criar_alfabeto_deslocado(chave_recebida)
mapeamento_decodificar = criar_mapeamento_numero_letra(alfabeto_deslocado_decodificar)

print(f"   Alfabeto reconstru√≠do: {alfabeto_deslocado_decodificar}")
print()
print("   Convertendo n√∫mero por n√∫mero:")
for i, numero in enumerate(numeros_recebidos):
    letra = mapeamento_decodificar[numero]
    print(f"      {numero} ‚Üí '{letra}'")
print()

# Decodifica
mensagem_decodificada = decodificar(numeros_recebidos, mapeamento_decodificar)
print(f"‚úÖ Mensagem decodificada: '{mensagem_decodificada.upper()}'")
print()

# ===================================================================
# VERIFICA√á√ÉO
# ===================================================================

print("=" * 70)
print("   VERIFICA√á√ÉO FINAL")
print("=" * 70)
print()
print(f"üìù Mensagem original:      {mensagem_original.upper()}")
print(f"üî¢ Mensagem em n√∫meros:    {mensagem_cifrada}")
print(f"üìù Mensagem decodificada:  {mensagem_decodificada.upper()}")
print()

if mensagem_original == mensagem_decodificada:
    print("‚úÖ SUCESSO! As mensagens correspondem perfeitamente!")
else:
    print("‚ùå ERRO! Algo deu errado na decodifica√ß√£o.")

print()
print("=" * 70)
print("   O QUE TORNA ISSO SEGURO?")
print("=" * 70)
print()
print("üîê Seguran√ßa:")
print("   ‚Ä¢ Sem a CHAVE (deslocamento), os n√∫meros n√£o fazem sentido")
print("   ‚Ä¢ Existem 26 poss√≠veis chaves (deslocamentos)")
print("   ‚Ä¢ O interceptador teria que testar todas as 26 combina√ß√µes")
print()
print("‚ö†Ô∏è  Limita√ß√µes:")
print("   ‚Ä¢ Com apenas 26 possibilidades, pode ser quebrado por for√ßa bruta")
print("   ‚Ä¢ Para maior seguran√ßa, combine com outras t√©cnicas!")
print()
print("=" * 70)
