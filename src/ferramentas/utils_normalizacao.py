"""
üåç M√≥dulo de Normaliza√ß√£o de Texto para Cifra de C√©sar
======================================================

Este m√≥dulo fornece fun√ß√µes para normalizar texto com acentos e caracteres
especiais, convertendo-os para o alfabeto b√°sico (a-z) usado na cifra.

Autor: Sistema de Cifra de C√©sar
"""

def normalizar_texto(texto):
    """
    üîÑ Normaliza texto removendo acentos e convertendo caracteres especiais
    
    Convers√µes suportadas:
    - Acentos: √°, √†, √£, √¢, √§ ‚Üí a
    - Acentos: √©, √®, √™, √´ ‚Üí e
    - Acentos: √≠, √¨, √Æ, √Ø ‚Üí i
    - Acentos: √≥, √≤, √µ, √¥, √∂ ‚Üí o
    - Acentos: √∫, √π, √ª, √º ‚Üí u
    - Especiais: √ß ‚Üí c
    - Especiais: √± ‚Üí n
    
    Par√¢metros:
        texto (str): Texto original com poss√≠veis acentos
        
    Retorna:
        str: Texto normalizado apenas com a-z e espa√ßos
        
    Exemplos:
        >>> normalizar_texto("S√£o Paulo")
        'sao paulo'
        >>> normalizar_texto("Ol√°, tudo bem?")
        'ola tudo bem'
        >>> normalizar_texto("A√ß√∫car")
        'acucar'
    """
    # Mapa de substitui√ß√£o de caracteres
    mapa_acentos = {
        # Letras A
        '√°': 'a', '√†': 'a', '√£': 'a', '√¢': 'a', '√§': 'a',
        '√Å': 'a', '√Ä': 'a', '√É': 'a', '√Ç': 'a', '√Ñ': 'a',
        
        # Letras E
        '√©': 'e', '√®': 'e', '√™': 'e', '√´': 'e',
        '√â': 'e', '√à': 'e', '√ä': 'e', '√ã': 'e',
        
        # Letras I
        '√≠': 'i', '√¨': 'i', '√Æ': 'i', '√Ø': 'i',
        '√ç': 'i', '√å': 'i', '√é': 'i', '√è': 'i',
        
        # Letras O
        '√≥': 'o', '√≤': 'o', '√µ': 'o', '√¥': 'o', '√∂': 'o',
        '√ì': 'o', '√í': 'o', '√ï': 'o', '√î': 'o', '√ñ': 'o',
        
        # Letras U
        '√∫': 'u', '√π': 'u', '√ª': 'u', '√º': 'u',
        '√ö': 'u', '√ô': 'u', '√õ': 'u', '√ú': 'u',
        
        # Caracteres especiais
        '√ß': 'c', '√á': 'c',
        '√±': 'n', '√ë': 'n',
    }
    
    # Converte para min√∫sculas primeiro
    texto_normalizado = texto.lower()
    
    # Substitui cada caractere acentuado
    for acentuado, normal in mapa_acentos.items():
        texto_normalizado = texto_normalizado.replace(acentuado, normal)
    
    return texto_normalizado


def mostrar_conversoes(texto_original):
    """
    üìä Mostra as convers√µes realizadas no texto
    
    √ötil para feedback ao usu√°rio sobre quais caracteres foram convertidos.
    
    Par√¢metros:
        texto_original (str): Texto antes da normaliza√ß√£o
        
    Retorna:
        tuple: (texto_normalizado, lista_conversoes)
    """
    texto_normalizado = normalizar_texto(texto_original)
    conversoes = []
    
    # Identifica caracteres que foram convertidos
    for i, char in enumerate(texto_original):
        char_normalizado = normalizar_texto(char)
        if char.lower() != char_normalizado and char.isalpha():
            conversoes.append(f"'{char}' ‚Üí '{char_normalizado}'")
    
    return texto_normalizado, conversoes


if __name__ == "__main__":
    # üß™ Testes do m√≥dulo
    print("=" * 60)
    print("üåç TESTE DO M√ìDULO DE NORMALIZA√á√ÉO")
    print("=" * 60)
    
    testes = [
        "S√£o Paulo",
        "Ol√°, tudo bem?",
        "A√ß√∫car e caf√©",
        "P√£o de queijo √© uma del√≠cia!",
        "Cora√ß√£o valente",
        "Jos√© e Mar√≠a",
        "Programa√ß√£o em Python"
    ]
    
    for teste in testes:
        normalizado, conversoes = mostrar_conversoes(teste)
        print(f"\nüìù Original:    '{teste}'")
        print(f"‚úÖ Normalizado: '{normalizado}'")
        if conversoes:
            print(f"üîÑ Convers√µes:  {', '.join(conversoes)}")
    
    print("\n" + "=" * 60)
    print("‚úÖ Testes conclu√≠dos!")
    print("=" * 60)
